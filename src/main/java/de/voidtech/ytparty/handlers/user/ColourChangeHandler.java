package main.java.de.voidtech.ytparty.handlers.user;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;

import main.java.de.voidtech.ytparty.annotations.Handler;
import main.java.de.voidtech.ytparty.entities.ephemeral.AuthResponse;
import main.java.de.voidtech.ytparty.entities.ephemeral.GatewayConnection;
import main.java.de.voidtech.ytparty.entities.persistent.User;
import main.java.de.voidtech.ytparty.handlers.AbstractHandler;
import main.java.de.voidtech.ytparty.service.GatewayAuthService;
import main.java.de.voidtech.ytparty.service.GatewayResponseService;
import main.java.de.voidtech.ytparty.service.UserService;

@Handler
public class ColourChangeHandler extends AbstractHandler {

	@Autowired
	private UserService userService; //User service is needed to modify user data
	
	@Autowired
	private GatewayResponseService responder; //Responder is needed to send data back to client
	
	@Autowired
	private GatewayAuthService authService; //AuthService is used to validate Tokens and Room IDs
	
	@Override
	public void execute(GatewayConnection session, JSONObject data) {
		String colour = data.getString("colour"); //Get the new colour input
		String token = data.getString("token"); //Get the user's token
		
		AuthResponse tokenResponse = authService.validateToken(token); //Validate the token 
		
		//Is the token valid? if not, send the message generated by the authenticator
		if (!tokenResponse.isSuccessful()) responder.sendError(session, tokenResponse.getMessage(), this.getHandlerType());
		//Otherwise, get the user's database information and modify it.
		else {
			String username = tokenResponse.getActingString(); //We need the username to find the user
			User user = userService.getUser(username); //Use the username to find the user in the DB
			user.setHexColour(colour); //Set their colour
			userService.saveUser(user); //Save the modification
			responder.sendSuccess(session, new JSONObject().put("message", "Colour changed!"), this.getHandlerType());
			//Send a success message to the client
		}
	}

	@Override
	public String getHandlerType() {
		return "user-changecolour";
	}
	
	@Override
	public boolean requiresRateLimit() {
		return true;
	}
}